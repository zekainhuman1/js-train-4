//–ó–í–ï–†–ù–Ü–¢–¨ –£–í–ê–ì–£!! –ü—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π —É –≤–∞—Å –º–æ–∂—É—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞—Ç–∏—Å—å –ø–µ–≤–Ω—ñ —Å–∏–º–≤–æ–ª–∏.
//–¶–µ –º–æ–∂–µ –∑–∞–ª–µ–∂–∏—Ç–∏, —è–∫ –≤—ñ–¥ –≤–∞—à–æ—ó –û–° —Ç–∞–∫ —ñ –≤–µ—Ä—Å—ñ—ó Node, —Ü–µ –Ω–µ —î –∫—Ä–∏—Ç–∏—á–Ω–∏–º —Ç–æ–º—É –≤ —Ç–µ—Å—Ç–∞—Ö –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏.

// –ó–∞–≤–¥–∞–Ω–Ω—è 1: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∑–Ω–∞—á–∞—î –¥–æ–≤–∂–∏–Ω—É —Ä—è–¥–∫–∞

function findStringLength(str) {
  return str.length
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å length, —â–æ–± –∑–Ω–∞–π—Ç–∏ –¥–æ–≤–∂–∏–Ω—É —Ä—è–¥–∫–∞ str
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 1 ====================================");
console.log(
  'findStringLength("Hello, world!")',
  findStringLength("Hello, world!")
); // –í–∏–≤–µ–¥–µ 13

// –ó–∞–≤–¥–∞–Ω–Ω—è 2: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≥–µ–Ω–µ—Ä—É—î —Ä—è–¥–æ–∫ –∑ —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ó—Ö –∫–æ–¥—ñ–≤ Unicode

function generateStringFromCharCode(code1, code2, code3, code4, code5) {
  return String.fromCharCode(code1, code2, code3, code4, code5)
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ String.fromCharCode(), —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–æ–∫ –∑ —Å–∏–º–≤–æ–ª—ñ–≤ code1, code2, code3, code4, code5 –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ó—Ö –∫–æ–¥—ñ–≤ Unicode
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 2 ====================================");
console.log(
  "generateStringFromCharCode(72, 101, 108, 108, 111)",
  generateStringFromCharCode(72, 101, 108, 108, 111)
); // –í–∏–≤–µ–¥–µ "Hello"

// –ó–∞–≤–¥–∞–Ω–Ω—è 3: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≥–µ–Ω–µ—Ä—É—î —Ä—è–¥–æ–∫ –∑ —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ó—Ö –∫–æ–¥—ñ–≤ Unicode

function generateStringFromCodePoint(code1, code2, code3, code4) {
  return String.fromCodePoint(code1, code2, code3, code4)

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ String.fromCodePoint(), —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–æ–∫ –∑ —Å–∏–º–≤–æ–ª—ñ–≤ code1, code2, code3, code4 –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ó—Ö –∫–æ–¥—ñ–≤ Unicode
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 3 ====================================");
console.log(
  "generateStringFromCodePoint(9731, 9733, 9842, 0x2f804)",
  generateStringFromCodePoint(9731, 9733, 9842, 0x2f804)
); // –í–∏–≤–µ–¥–µ "‚òÉ‚òÖ‚ô≤Ø†Ñ"

// –ó–∞–≤–¥–∞–Ω–Ω—è 4: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ä—è–¥–æ–∫ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º String.raw

function rawString() {
  return String.raw`–ü—Ä–∏–≤—ñ—Ç\u000A!`
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ String.raw, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–æ–∫ "–ü—Ä–∏–≤—ñ—Ç\u000A!", —è–∫–∏–π —ñ–≥–Ω–æ—Ä—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 4 ====================================");
console.log("rawString()", rawString()); // –í–∏–≤–µ–¥–µ –ü—Ä–∏–≤—ñ—Ç\u000A!

// –ó–∞–≤–¥–∞–Ω–Ω—è 5: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –æ–±'—î–¥–Ω—É—î –¥–≤–∞ —Ä—è–¥–∫–∏

function concatenateStrings(str1, str2) {
  return str1.concat(str2)
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ concat(), —â–æ–± –æ–±'—î–¥–Ω–∞—Ç–∏ –¥–≤–∞ —Ä—è–¥–∫–∏ str1 —Ç–∞ str2
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 5 ====================================");
console.log(
  'concatenateStrings("Hello", "World!")',
  concatenateStrings("Hello", "World!")
); // –í–∏–≤–µ–¥–µ "HelloWorld!"

// –ó–∞–≤–¥–∞–Ω–Ω—è 6: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—Ö–æ–¥–∏—Ç—å –ø—ñ–¥—Ä—è–¥–æ–∫ –≤ —Ä—è–¥–æ–∫

function checkIfIncludes(mainStr, subStr) {
  return mainStr.includes(subStr)
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ includes(), —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤—Ö–æ–¥–∏—Ç—å –ø—ñ–¥—Ä—è–¥–æ–∫ subStr –≤ —Ä—è–¥–æ–∫ mainStr
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 6 ====================================");
console.log(
  'checkIfIncludes("Hello, world!", "world")',
  checkIfIncludes("Hello, world!", "world")
); // –í–∏–≤–µ–¥–µ true

// –ó–∞–≤–¥–∞–Ω–Ω—è 7: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —ñ–Ω–¥–µ–∫—Å –ø—ñ–¥—Ä—è–¥–∫–∞ –≤ —Ä—è–¥–∫—É

function findIndexOf(mainStr, subStr) {
  return mainStr.indexOf(subStr)

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ indexOf(), —â–æ–± –∑–Ω–∞–π—Ç–∏ —ñ–Ω–¥–µ–∫—Å –ø—ñ–¥—Ä—è–¥–∫–∞ subStr –≤ —Ä—è–¥–∫—É mainStr
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 7 ====================================");
console.log(
  'findIndexOf("Hello, world!", "world")',
  findIndexOf("Hello, world!", "world")
); // –í–∏–≤–µ–¥–µ 7

// –ó–∞–≤–¥–∞–Ω–Ω—è 8: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ–π —ñ–Ω–¥–µ–∫—Å –ø—ñ–¥—Ä—è–¥–∫–∞ –≤ —Ä—è–¥–∫—É

function findLastIndexOf(mainStr, subStr) {
  return mainStr.lastIndexOf(subStr)

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ lastIndexOf(), —â–æ–± –∑–Ω–∞–π—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π —ñ–Ω–¥–µ–∫—Å –ø—ñ–¥—Ä—è–¥–∫–∞ subStr –≤ —Ä—è–¥–∫—É mainStr
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 8 ====================================");
console.log(
  'findLastIndexOf("Hello, world! Hello, universe!", "Hello")',
  findLastIndexOf("Hello, world! Hello, universe!", "Hello")
); // –í–∏–≤–µ–¥–µ 14

// –ó–∞–≤–¥–∞–Ω–Ω—è 9: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ä—è–¥–æ–∫ –∑ –ø–µ–≤–Ω–æ–≥–æ –ø—ñ–¥—Ä—è–¥–∫–∞

function checkIfStartsWith(mainStr, subStr) {
  return mainStr.startsWith(subStr)

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ startsWith(), —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ä—è–¥–æ–∫ mainStr –∑ –ø–µ–≤–Ω–æ–≥–æ –ø—ñ–¥—Ä—è–¥–∫–∞ subStr
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 9 ====================================");
console.log(
  'checkIfStartsWith("Hello, world!", "Hello")',
  checkIfStartsWith("Hello, world!", "Hello")
); // –í–∏–≤–µ–¥–µ true

// –ó–∞–≤–¥–∞–Ω–Ω—è 10: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —Ä—è–¥–æ–∫ –ø–µ–≤–Ω–∏–º –ø—ñ–¥—Ä—è–¥–∫–æ–º

function checkIfEndsWith(mainStr, subStr) {
  return mainStr.endsWith(subStr)

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ endsWith(), —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —Ä—è–¥–æ–∫ mainStr –ø–µ–≤–Ω–∏–º –ø—ñ–¥—Ä—è–¥–∫–æ–º subStr
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 10 ====================================");
console.log(
  'checkIfEndsWith("Hello, world!", "world!")',
  checkIfEndsWith("Hello, world!", "world!")
); // –í–∏–≤–µ–¥–µ true

// –ó–∞–≤–¥–∞–Ω–Ω—è 11: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ –º–µ—Ç–æ–¥–∞–º–∏ charCodeAt, codePointAt, charAt, at

function compareCharCodeAtAndCodePointAt(string, index) {
  const charAtResult = string.charAt(index);
  const atResult = string.at(index);
  const charCodeAtResult = string.charCodeAt(index);
  const codePointAtResult = string.codePointAt(index);
  return `charCodeAt:${charCodeAtResult}, codePointAt:${codePointAtResult}, charAt:${charAtResult}, at: ${atResult}`
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ charAt(), —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–º–≤–æ–ª –∑ —Ä—è–¥–∫–∞ –Ω–∞ –ø–µ–≤–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó, —Ç–∞ –∑–∞–ø–∏—à–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–º—ñ–Ω–Ω—É charAtResult
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ at(), —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–º–≤–æ–ª –∑ —Ä—è–¥–∫–∞ –Ω–∞ –ø–µ–≤–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó, —Ç–∞ –∑–∞–ø–∏—à–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–º—ñ–Ω–Ω—É atResult
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ charCodeAt(), —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞ –∑ —Ä—è–¥–∫–∞ –Ω–∞ –ø–µ–≤–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó, —Ç–∞ –∑–∞–ø–∏—à–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–º—ñ–Ω–Ω—É charCodeAtResult
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ codePointAt(), —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞ –∑ —Ä—è–¥–∫–∞ –Ω–∞ –ø–µ–≤–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó, —Ç–∞ –∑–∞–ø–∏—à–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–º—ñ–Ω–Ω—É codePointAtResult
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä—è–¥–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ  `charCodeAt:${charCodeAtResult}, codePointAt:${codePointAtResult}, charAt:${charAtResult}, at: ${atResult}`
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 11 ====================================");
console.log(
  'compareCharCodeAtAndCodePointAt("‚òÖ", 0)',
  compareCharCodeAtAndCodePointAt("‚òÖ", 0)
); // –í–∏–≤–µ–¥–µ charCodeAt:9733, codePointAt:9733, charAt:‚òÖ, at: ‚òÖ

console.log(
  'compareCharCodeAtAndCodePointAt("a", 0)',
  compareCharCodeAtAndCodePointAt("a", 0)
); // –í–∏–≤–µ–¥–µ  charCodeAt:97, codePointAt:97, charAt:a, at: a

console.log(
  'compareCharCodeAtAndCodePointAt("üòÄ", 0)',
  compareCharCodeAtAndCodePointAt("üòÄ", 0)
); // –í–∏–≤–µ–¥–µ charCodeAt:55357, codePointAt:128512, charAt:ÔøΩ, at: ÔøΩ

// –ó–∞–≤–¥–∞–Ω–Ω—è 12: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –±—É–¥–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–∏–º–≤–æ–ª–∏ –¥–æ —Ä—è–¥–∫–∞ –∑ –ø–æ—á–∞—Ç–∫—É –∞–±–æ –∑ –∫—ñ–Ω—Ü—è, –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—É "side".

function padString(original, length, padWith, side) {
  if (side == "start") {
    return original.padStart(length, padWith)
  } else if (side == "end") {
    return original.padEnd(length, padWith)
  } else {
    return "Error: side should be either 'start' or 'end'"
  }
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —è–∫–∏–π –±—ñ–∫ –±—É–ª–æ –≤–∫–∞–∑–∞–Ω–æ
  // –Ø–∫—â–æ "start", –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ padStart
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ padStart(), —â–æ–± –¥–æ–ø–æ–≤–Ω–∏—Ç–∏ —Ä—è–¥–æ–∫ string –¥–æ –ø–µ–≤–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏ length, –≤—Å—Ç–∞–≤–ª—è—é—á–∏ —Å–∏–º–≤–æ–ª–∏ padWith –Ω–∞ –ø–æ—á–∞—Ç–∫—É
  // –Ø–∫—â–æ "end", –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ padEnd
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ padEnd(), —â–æ–± –¥–æ–ø–æ–≤–Ω–∏—Ç–∏ —Ä—è–¥–æ–∫ string –¥–æ –ø–µ–≤–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏ length, –≤—Å—Ç–∞–≤–ª—è—é—á–∏ —Å–∏–º–≤–æ–ª–∏ padWith –Ω–∞ –≤ –∫—ñ–Ω—Ü—ñ
  // –Ø–∫—â–æ –±—ñ–∫ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∞–±–æ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "Error: side should be either 'start' or 'end'"
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 12 ====================================");
console.log(
  'padString("123", 5, "0", "start")',
  padString("123", 5, "0", "start")
); // –í–∏–≤–µ–¥–µ "00123"
console.log('padString("123", 5, "0", "end")', padString("123", 5, "0", "end")); // –í–∏–≤–µ–¥–µ "12300"
console.log(
  'padString("123", 5, "0", "middle")',
  padString("123", 5, "0", "middle")
); // –í–∏–≤–µ–¥–µ "Error: side should be either 'start' or 'end'"

// –ó–∞–≤–¥–∞–Ω–Ω—è 13: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –±—É–¥–µ –≤–∏–¥–∞–ª—è—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏ –∑ —Ä—è–¥–∫–∞ –Ω–∞ –ø–æ—á–∞—Ç–∫—É, –≤ –∫—ñ–Ω—Ü—ñ –∞–±–æ –∑ –æ–±–æ—Ö —Å—Ç–æ—Ä—ñ–Ω, –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—É "side".

function trimString(original, side) {
  if (side == "start") {
    return original.trimStart()
  } else if (side == "end") {
    return original.trimEnd()
  } else if (side == "both") {
    return original.trim()
  } else {
    return "Error: side should be either 'start', 'end' or 'both'"
  }
  // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—É "side" –¥–æ—Ä—ñ–≤–Ω—é—î "start"
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä—è–¥–æ–∫, –≤ —è–∫–æ–º—É –≤–∏–¥–∞–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É
  // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—É "side" –¥–æ—Ä—ñ–≤–Ω—é—î "end"
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä—è–¥–æ–∫, –≤ —è–∫–æ–º—É –≤–∏–¥–∞–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–∏ –≤ –∫—ñ–Ω—Ü—ñ
  // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—É "side" –¥–æ—Ä—ñ–≤–Ω—é—î "both"
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä—è–¥–æ–∫, –≤ —è–∫–æ–º—É –≤–∏–¥–∞–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–∏ –∑ –æ–±–æ—Ö —Å—Ç–æ—Ä—ñ–Ω
  // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—É "side" –Ω–µ —î –Ω—ñ "start", –Ω—ñ "end", –Ω—ñ "both", –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "Error: side should be either 'start', 'end' or 'both'"
  return "Error: side should be either 'start', 'end' or 'both'";
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 13 ====================================");
console.log('trimString(" 123 ", "start")', trimString(" 123 ", "start")); // –í–∏–≤–µ–¥–µ "123 "
console.log('trimString(" 123 ", "end")', trimString(" 123 ", "end")); // –í–∏–≤–µ–¥–µ " 123"
console.log('trimString(" 123 ", "both")', trimString(" 123 ", "both")); // –í–∏–≤–µ–¥–µ "123"
console.log('trimString(" 123 ", "middle")', trimString(" 123 ", "middle")); // –í–∏–≤–µ–¥–µ "Error: side should be either 'start', 'end' or 'both'"

// –ó–∞–≤–¥–∞–Ω–Ω—è 14: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –±—É–¥–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä—è–¥–æ–∫ –≤ –≤–µ—Ä—Ö–Ω—ñ–π –∞–±–æ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä, –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—É "caseType".

function convertCase(original, caseType) {
  if (caseType == "upper") {
    return original.toUpperCase()
  } else if (caseType == "lower") {
    return original.toLowerCase()
  } else {
    return "Error: caseType should be either 'upper' or 'lower'"
  }
  // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—É "caseType" –¥–æ—Ä—ñ–≤–Ω—é—î "upper"
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä—è–¥–æ–∫, –≤ —è–∫–æ–º—É –≤—Å—ñ –±—É–∫–≤–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω—ñ –≤ –≤–µ—Ä—Ö–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
  // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—É "caseType" –¥–æ—Ä—ñ–≤–Ω—é—î "lower"
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä—è–¥–æ–∫, –≤ —è–∫–æ–º—É –≤—Å—ñ –±—É–∫–≤–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω—ñ –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
  // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—É "caseType" –Ω–µ —î –Ω—ñ "upper", –Ω—ñ "lower", –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "Error: caseType should be either 'upper' or 'lower'"
  return "Error: caseType should be either 'upper' or 'lower'";
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 14 ====================================");
console.log('convertCase("abc", "upper")', convertCase("abc", "upper")); // –í–∏–≤–µ–¥–µ "ABC"
console.log('convertCase("ABC", "lower")', convertCase("ABC", "lower")); // –í–∏–≤–µ–¥–µ "abc"
console.log('convertCase("abc", "middle")', convertCase("abc", "middle")); // –í–∏–≤–µ–¥–µ "Error: caseType should be either 'upper' or 'lower'"

// –ó–∞–≤–¥–∞–Ω–Ω—è 15: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–æ–≤—Ç–æ—Ä—é—î —Ä—è–¥–æ–∫ –ø–µ–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∑—ñ–≤

function repeatString(string, times) {
  return string.repeat(times)
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ repeat(), —â–æ–± –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Ä—è–¥–æ–∫ –ø–µ–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∑—ñ–≤ times
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 15 ====================================");
console.log('repeatString("abc", 3)', repeatString("abc", 3)); // –í–∏–≤–µ–¥–µ 'abcabcabc'

// –ó–∞–≤–¥–∞–Ω–Ω—è 16: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–¥–∞–ª—è—î —á–∞—Å—Ç–∏–Ω—É —Ä—è–¥–∫–∞ –º—ñ–∂ –¥–≤–æ–º–∞ —ñ–Ω–¥–µ–∫—Å–∞–º–∏

function sliceString(string, startIndex, endIndex) {
  return string.slice(startIndex, endIndex)
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ slice(), —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Å—Ç–∏–Ω—É —Ä—è–¥–∫–∞ string –º—ñ–∂ –¥–≤–æ–º–∞ —ñ–Ω–¥–µ–∫—Å–∞–º–∏ startIndex —Ç–∞ endIndex
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 16 ====================================");
console.log(
  'sliceString("Hello, world!", 0, 5)',
  sliceString("Hello, world!", 0, 5)
); // –í–∏–≤–µ–¥–µ 'Hello'

// –ó–∞–≤–¥–∞–Ω–Ω—è 17: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–¥–∞–ª—è—î —á–∞—Å—Ç–∏–Ω—É —Ä—è–¥–∫–∞ –º—ñ–∂ –¥–≤–æ–º–∞ —ñ–Ω–¥–µ–∫—Å–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ substring

function substringString(string, startIndex, endIndex) {
  return string.substring(startIndex, endIndex)

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ substring(), —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Å—Ç–∏–Ω—É —Ä—è–¥–∫–∞ string –º—ñ–∂ –¥–≤–æ–º–∞ —ñ–Ω–¥–µ–∫—Å–∞–º–∏ startIndex —Ç–∞ endIndex
}

console.log("–ó–∞–≤–¥–∞–Ω–Ω—è 17 ====================================");
console.log(
  'substringString("Hello, world!", 0, 5)',
  substringString("Hello, world!", 0, 5)
); // –í–∏–≤–µ–¥–µ 'Hello'
